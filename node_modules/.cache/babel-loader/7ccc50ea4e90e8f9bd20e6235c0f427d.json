{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport { helper } from '../helpers/common';\nimport { apiWeather } from '../services/api';\nimport { SEARCH_REQUEST } from '../actions/types'; // Luon luon su sung generator function cho REDUX SAGA. KO SU DUNG ARROW\n// working + watching: thuc thi va theo doi actions. \n//working\n\nfunction* getDataWeatherFromApi({\n  payload\n}) {\n  try {\n    //tiep nhan action: (requestSearch) tu phia thao tac nguoi dung - tra ve cac action khac\n    // bat dau tim kiem - dispatch action cua saga vao store\n    yield put(actions.startWeather(true)); // bao hieu dang di lay data tu api\n\n    yield put(actions.loadingGetDataWeather(true)); // call data\n\n    const dataWeathers = yield call(apiWeather.getDataWeatherCity, city, lang);\n\n    if (helper.isEmptyObject(dataWeathers)) {\n      yield put(actions.getDataWeatherFail({\n        code: 404,\n        message: 'Not Found Data'\n      }));\n    } else {\n      yield put(actions.getDataWeatherSuccess(dataWeathers));\n    }\n  } catch (err) {\n    yield put(actions.getDataWeatherFail({\n      code: 500,\n      message: 'err'\n    }));\n  } finally {\n    //ket thuc call API\n    yield put(actions.finishGetDataWeather(true));\n  }\n} // watching \n\n\nexport function* watchingGetDataWeatherFromApi() {\n  yield takeLatest(SEARCH_REQUEST, getDataWeatherFromApi);\n}","map":{"version":3,"sources":["/Users/loctran/Desktop/hocreact/src/weather/sagas/weatherSaga.js"],"names":["call","put","takeLatest","actions","helper","apiWeather","SEARCH_REQUEST","getDataWeatherFromApi","payload","startWeather","loadingGetDataWeather","dataWeathers","getDataWeatherCity","city","lang","isEmptyObject","getDataWeatherFail","code","message","getDataWeatherSuccess","err","finishGetDataWeather","watchingGetDataWeatherFromApi"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;AACA;AAEA;;AAEA,UAAUC,qBAAV,CAAgC;AAACC,EAAAA;AAAD,CAAhC,EAA2C;AAC3C,MAAI;AACA;AAEA;AACA,UAAMP,GAAG,CAACE,OAAO,CAACM,YAAR,CAAqB,IAArB,CAAD,CAAT,CAJA,CAKA;;AACA,UAAMR,GAAG,CAACE,OAAO,CAACO,qBAAR,CAA8B,IAA9B,CAAD,CAAT,CANA,CAOA;;AACA,UAAMC,YAAY,GAAG,MAAMX,IAAI,CAACK,UAAU,CAACO,kBAAZ,EAAgCC,IAAhC,EAAsCC,IAAtC,CAA/B;;AACA,QAAGV,MAAM,CAACW,aAAP,CAAqBJ,YAArB,CAAH,EAAuC;AACnC,YAAMV,GAAG,CAACE,OAAO,CAACa,kBAAR,CAA2B;AACjCC,QAAAA,IAAI,EAAE,GAD2B;AAEjCC,QAAAA,OAAO,EAAE;AAFwB,OAA3B,CAAD,CAAT;AAIH,KALD,MAKO;AACH,YAAMjB,GAAG,CAACE,OAAO,CAACgB,qBAAR,CAA8BR,YAA9B,CAAD,CAAT;AACH;AACJ,GAjBD,CAiBE,OAAMS,GAAN,EAAW;AACT,UAAMnB,GAAG,CAACE,OAAO,CAACa,kBAAR,CAA2B;AACjCC,MAAAA,IAAI,EAAE,GAD2B;AAEjCC,MAAAA,OAAO,EAAE;AAFwB,KAA3B,CAAD,CAAT;AAIC,GAtBL,SAsBc;AACN;AACA,UAAMjB,GAAG,CAACE,OAAO,CAACkB,oBAAR,CAA6B,IAA7B,CAAD,CAAT;AACH;AACJ,C,CAGD;;;AACA,OAAO,UAAUC,6BAAV,GAA0C;AAC7C,QAAMpB,UAAU,CAACI,cAAD,EAAiBC,qBAAjB,CAAhB;AAEH","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\nimport * as actions from '../actions/index';\nimport {helper} from '../helpers/common';\nimport { apiWeather } from '../services/api';\nimport { SEARCH_REQUEST } from '../actions/types';\n\n// Luon luon su sung generator function cho REDUX SAGA. KO SU DUNG ARROW\n// working + watching: thuc thi va theo doi actions. \n\n//working\n\nfunction* getDataWeatherFromApi({payload}) {\ntry {\n    //tiep nhan action: (requestSearch) tu phia thao tac nguoi dung - tra ve cac action khac\n\n    // bat dau tim kiem - dispatch action cua saga vao store\n    yield put(actions.startWeather(true));\n    // bao hieu dang di lay data tu api\n    yield put(actions.loadingGetDataWeather(true));\n    // call data\n    const dataWeathers = yield call(apiWeather.getDataWeatherCity, city, lang)\n    if(helper.isEmptyObject(dataWeathers)) {\n        yield put(actions.getDataWeatherFail({\n            code: 404,\n            message: 'Not Found Data'\n        }))\n    } else {\n        yield put(actions.getDataWeatherSuccess(dataWeathers))\n    }\n} catch(err) {\n    yield put(actions.getDataWeatherFail({\n        code: 500,\n        message: 'err'\n    }))\n    } finally {\n        //ket thuc call API\n        yield put(actions.finishGetDataWeather(true));\n    }\n}\n\n\n// watching \nexport function* watchingGetDataWeatherFromApi() {\n    yield takeLatest(SEARCH_REQUEST, getDataWeatherFromApi);\n\n}"]},"metadata":{},"sourceType":"module"}